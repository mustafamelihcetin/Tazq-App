# CI/CD Pipeline to build, test, apply EF migrations, and deploy ASP.NET Core backend to Azure Web App

name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  DOTNET_VERSION: 8.0.x
  WORKING_DIRECTORY: Tazq-Backend
  AZURE_WEBAPP_NAME: tazq-backend-api
  PUBLISH_DIR: Tazq-Backend/publish
  API_SPEC_PATH: Tazq-Backend/publish/swagger.json

jobs:
  build:
    name: Build and Package Backend
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Install EF Core CLI and Swashbuckle CLI
      - name: Install tools
        run: |
          dotnet tool install --global dotnet-ef
          dotnet tool install --global Swashbuckle.AspNetCore.Cli --version 6.4.0
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Restore NuGet packages
      - name: Restore dependencies
        run: dotnet restore ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --force --ignore-failed-sources

      # Build project
      - name: Build project
        run: dotnet build ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --configuration Release --no-restore

      # Apply EF Core Migrations
      - name: Apply database migrations
        run: |
          if [ -z "${{ secrets.JWT_KEY }}" ]; then
            echo "JWT_KEY is missing!"
            exit 1
          fi
          dotnet ef database update --project ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --context AppDbContext

      # Run tests
      - name: Run tests
        run: dotnet test ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --no-build --configuration Release

      # Publish application
      - name: Publish application
        run: dotnet publish ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --configuration Release --no-build --output ${{ env.PUBLISH_DIR }}

      # Start app and wait for Swagger
      - name: Start API locally
        run: |
          dotnet run --no-build --urls="http://0.0.0.0:7031" --project ${{ env.WORKING_DIRECTORY }} > output.log 2>&1 &
          sleep 20

      - name: Wait for Swagger JSON
        run: |
          for i in {1..12}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7031/swagger/v1/swagger.json)
            if [ "$STATUS" == "200" ]; then
              echo "Swagger is ready"
              exit 0
            fi
            echo "Waiting for Swagger ($STATUS)..."
            sleep 5
          done
          echo "Swagger endpoint failed."
          cat output.log
          exit 1

      - name: Export Swagger JSON
        run: curl -s http://localhost:7031/swagger/v1/swagger.json > "${{ env.API_SPEC_PATH }}"

      # Upload artifact for deploy
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: ${{ env.PUBLISH_DIR }}
