# GitHub Actions CI/CD pipeline for deploying backend to Azure App Service
# Includes EF migrations, Swagger generation, unit testing and zipped deployment

name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  WORKING_DIRECTORY: Tazq-Backend
  DOTNET_VERSION: 8.0.x
  AZURE_WEBAPP_NAME: tazq-backend-api
  PUBLISH_DIR: Tazq-Backend/publish

jobs:
  build:
    name: Build and Package Backend
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Install required tools
      - name: Install EF Core and Swashbuckle CLI
        run: |
          dotnet tool install --global dotnet-ef
          dotnet tool install --global Swashbuckle.AspNetCore.Cli --version 6.4.0
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Restore NuGet packages
      - name: Restore packages
        run: dotnet restore ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --force --ignore-failed-sources

      # Build backend project
      - name: Build project
        run: dotnet build ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --configuration Release --no-restore

      # Apply database migrations
      - name: Apply EF Core migrations
        run: dotnet ef database update --project ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --context AppDbContext

      # Run unit tests
      - name: Run tests
        run: dotnet test ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --no-build --configuration Release

      # Publish output
      - name: Publish app
        run: dotnet publish ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --configuration Release --no-build --output ${{ env.PUBLISH_DIR }}

      # Run backend in background to expose Swagger JSON
      - name: Start backend for Swagger
        run: |
          dotnet run --no-build --urls="http://0.0.0.0:7031" --project ${{ env.WORKING_DIRECTORY }} > output.log 2>&1 &
          sleep 20

      # Check if Swagger is available
      - name: Check Swagger readiness
        run: |
          for i in {1..12}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7031/swagger/v1/swagger.json)
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Swagger JSON is ready."
              exit 0
            fi
            echo "Swagger JSON not ready (HTTP $STATUS_CODE), retrying..."
            sleep 5
          done
          echo "Swagger JSON unavailable."
          cat output.log
          exit 1

      # Export Swagger JSON to file
      - name: Export Swagger JSON
        run: curl -s http://localhost:7031/swagger/v1/swagger.json > ${{ env.PUBLISH_DIR }}/swagger.json

      # Compress published files into backend.zip
      - name: Zip publish output
        run: zip -r backend.zip ${{ env.PUBLISH_DIR }}

      # Upload zipped backend as artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: backend.zip
