# Backend CI/CD pipeline with PORT=5001 fix for Swagger on GitHub Actions

name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  WORKING_DIRECTORY: Tazq-Backend
  DOTNET_VERSION: 8.0.x
  AZURE_WEBAPP_NAME: tazq-backend-api
  API_IMPORT_SPECIFICATION_PATH: publish/swagger.json
  API_IMPORT_DLL: Tazq-Backend/bin/Release/net8.0/Tazq-Backend.dll
  API_IMPORT_VERSION: v1
  JWT_KEY: ${{ secrets.JWT_KEY }}
  ZIP_PACKAGE_NAME: backend.zip

jobs:
  build:
    name: Build and Package Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install EF Core & Swagger CLI
        run: |
          dotnet tool install --global dotnet-ef
          dotnet tool install --global Swashbuckle.AspNetCore.Cli --version 6.4.0
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --force --ignore-failed-sources

      - name: Build backend project
        run: dotnet build ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --configuration Release --no-restore

      - name: Apply database migrations
        run: dotnet ef database update --project ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --context AppDbContext
        env:
           JWT_KEY: ${{ secrets.JWT_KEY }}
           DB_HOST: ${{ secrets.DB_HOST }}
           DB_PORT: ${{ secrets.DB_PORT }}
           DB_NAME: ${{ secrets.DB_NAME }}
           DB_USER: ${{ secrets.DB_USER }}
           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Run tests
        run: dotnet test ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --no-build --configuration Release --logger trx

      - name: Prepare publish folder
        run: |
          rm -rf publish
          mkdir publish

      - name: Publish the backend
        run: dotnet publish ${{ env.WORKING_DIRECTORY }}/Tazq-Backend.csproj --configuration Release --no-build --output publish -v:diag

      - name: Start API for Swagger
        run: |
          PORT=5001 nohup dotnet run --no-build --project ${{ env.WORKING_DIRECTORY }} > output.log 2>&1 &
          sleep 20
          echo "dotnet process check:"
          ps aux | grep dotnet
        env:
          JWT_KEY: ${{ secrets.JWT_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}

      - name: Wait for Swagger JSON
        run: |
          for i in {1..12}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001/swagger/v1/swagger.json)
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Swagger available"
              break
            fi
            echo "Attempt $i: Swagger not available (HTTP $STATUS_CODE)"
            sleep 5
          done

      - name: Export Swagger JSON
        run: curl -s http://localhost:5001/swagger/v1/swagger.json > "${{ env.API_IMPORT_SPECIFICATION_PATH }}"

      - name: Show output.log for debugging
        if: always()
        run: |
          if [ -f output.log ]; then
            echo "output.log bulundu. İçeriği:"
            cat output.log
          else
            echo "output.log bulunamadı!"
          fi

      - name: Create ZIP Artifact
        run: |
          cd publish
          zip -r ../${{ env.ZIP_PACKAGE_NAME }} .
          cd ..

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: ${{ env.ZIP_PACKAGE_NAME }}

  deploy:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend
          path: .

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy backend to Azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.ZIP_PACKAGE_NAME }}
