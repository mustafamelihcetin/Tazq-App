name: Deploy Backend to Azure Web App

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: tazq-backend-api
  AZURE_WEBAPP_PACKAGE_PATH: Tazq-Backend/publish
  DOTNET_VERSION: 8.0.x
  WORKING_DIRECTORY: Tazq-Backend
  API_IMPORT_SPECIFICATION_PATH: Tazq-Backend/publish/swagger.json
  API_IMPORT_DLL: Tazq-Backend/bin/Release/net8.0/Tazq-Backend.dll
  API_IMPORT_VERSION: v1
  JWT_KEY: ${{ secrets.JWT_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }} # Sadece Backend'i hedef al

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install Entity Framework CLI
        run: dotnet tool install --global dotnet-ef

      - name: Restore Dependencies (Only Backend)
        run: |
          echo "Restoring dependencies for backend only..."
          dotnet nuget locals all --clear
          dotnet restore --force

      - name: Build Backend Only
        run: |
          echo "Building backend only..."
          dotnet build --configuration Release --no-restore

      - name: Apply Database Migrations
        run: |
          echo "Applying database migrations..."
          dotnet ef database update --context AppDbContext
          echo "Checking tables in SQLite..."
          sqlite3 app.db ".tables"
          echo "Migrations applied successfully."

      - name: Test Backend Only
        run: |
          echo "Running tests for backend..."
          dotnet test --no-build --configuration Release

      - name: Ensure Publish Directory Exists
        run: mkdir -p "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

      - name: Publish Backend
        run: |
          echo "Publishing backend..."
          dotnet publish --configuration Release --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

      - name: Debug - List Published Files
        run: ls -la "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

      - name: Install Swashbuckle CLI
        run: |
          echo "Installing Swashbuckle CLI..."
          dotnet tool update --global Swashbuckle.AspNetCore.Cli --version 6.4.0 || \
          dotnet tool install --global Swashbuckle.AspNetCore.Cli --version 6.4.0
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          export PATH="$HOME/.dotnet/tools:$PATH"
          echo "Swashbuckle CLI installed successfully"

      - name: Start API for OpenAPI Generation
        run: |
          echo "Starting API in the background..."
          dotnet run --no-build --urls="http://0.0.0.0:7031" > output.log 2>&1 &
          sleep 20
          echo "API started successfully."

      - name: Print API Logs
        run: |
          echo "Fetching API logs..."
          cat output.log || echo "No logs found."

      - name: Check API Health
        run: |
          echo "Checking if API process is running..."
          if ! pgrep -f "dotnet run"; then
            echo "ERROR: API process is NOT running!"
            echo "====== ERROR LOGS ======"
            cat output.log
            exit 1
          fi
          echo "API is running."

      - name: Wait for Swagger JSON to be available
        run: |
          echo "Waiting for Swagger JSON to be accessible..."
          for i in {1..12}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7031/swagger/v1/swagger.json)
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Swagger JSON is now available."
              exit 0
            fi
            echo "Swagger JSON not ready (HTTP $STATUS_CODE), retrying in 5 seconds..."
            sleep 5
          done
          echo "ERROR: Swagger JSON never became available."
          cat output.log
          exit 1

      - name: Generate Open API Specification Document
        run: |
          echo "Generating Open API Specification Document..."
          curl -s http://localhost:7031/swagger/v1/swagger.json > "${{ env.API_IMPORT_SPECIFICATION_PATH }}"
          echo "Generated Open API Specification Document at ${{ env.API_IMPORT_SPECIFICATION_PATH }}"

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
